{
    "users": [
        {
            "username": "testuser",
            "password": "password123",
            "progress": {
                "xp": 1250,
                "level": 2,
                "xpToNextLevel": 2000,
                "badges": [
                    {
                        "name": "Bug Squasher",
                        "icon": "üêû",
                        "description": "Solved 10 challenges in one session."
                    }
                ],
                "dailyStreak": 1,
                "gems": 50
            }
        },
        {
            "username": "rajat1234",
            "password": "rajat12234",
            "progress": {
                "xp": 0,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 0,
                "gems": 0
            }
        },
        {
            "username": "123456789",
            "password": "123456798",
            "progress": {
                "xp": 0,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 0,
                "gems": 0
            }
        },
        {
            "username": "prasad",
            "password": "prasad",
            "progress": {
                "xp": 400,
                "level": 3,
                "xpToNextLevel": 1125,
                "badges": [],
                "dailyStreak": 14,
                "gems": 145
            },
            "codeSubmissions": [
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Your code here\n    // Hint: Compare the word with its reverse\n    console.log(\"hlw\")\n    return false; // Replace this\n}",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T04:09:32.367Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Your code here\n    // Hint: Compare the word with its reverse\n    console.log(\"Hellow\")\n    return false; // Replace this\n}",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T04:19:26.354Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Your code here\n    // Hint: Compare the word with its reverse\n    console.log(\"HII\")\n    return false; // Replace this\n}",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T04:26:14.703Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Your code here\n    // Hint: Compare the word with its reverse\n    console.log(\"HII\")\n    return false; // Replace this\n}",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T04:27:30.608Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    \n    num_map = {}  # Dictionary to store numbers and their indices\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]  # Return indices\n        num_map[num] = i  # Store the index of the current number\n    \n    return []  # If no solution found",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T04:33:08.243Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Convert to string just in case\n    word = String(word);\n    \n    // Compare original with reversed\n    return word === word.split('').reverse().join('');\n}",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T04:41:48.053Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T05:13:51.254Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T05:17:03.273Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Convert to lowercase for case-insensitive comparison\n    word = word.toLowerCase();\n\n    // Compare the word with its reverse\n    return word === word.split('').reverse().join('');\n}",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T15:56:10.715Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T15:57:49.437Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                }
            ]
        },
        {
            "username": "raj",
            "password": "raj",
            "progress": {
                "xp": 100,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 1,
                "gems": 10
            }
        },
        {
            "username": "rajat12",
            "password": "rajat12",
            "progress": {
                "xp": 0,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 0,
                "gems": 0
            }
        },
        {
            "username": "krish",
            "password": "krish12",
            "progress": {
                "xp": 450,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 3,
                "gems": 45
            },
            "codeSubmissions": [
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T06:02:45.188Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Convert word to lowercase to make it case-insensitive\n    let reversed = word.split('').reverse().join('');\n    return word === reversed;\n}",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T07:08:12.131Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "ds_array_sum",
                    "code": "function sum(arr) {\n    console.log(\"HI\");\n}",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T07:51:16.656Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    concolse.log(\"hi\");\n    \n}",
                    "isCorrect": false,
                    "timestamp": "2025-08-19T08:02:46.233Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Convert to lowercase for case-insensitive comparison\n    word = word.toLowerCase();\n\n    // Compare the word with its reverse\n    return word === word.split('').reverse().join('');\n}",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T08:05:09.592Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                }
            ]
        },
        {
            "username": "hello",
            "password": "hello12",
            "progress": {
                "xp": 0,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 0,
                "gems": 0
            }
        },
        {
            "username": "abcd",
            "password": "abcd12",
            "progress": {
                "xp": 300,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 2,
                "gems": 30
            },
            "codeSubmissions": [
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T08:39:14.674Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T08:39:43.690Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                }
            ]
        },
        {
            "username": "abcde",
            "password": "abcde12",
            "progress": {
                "xp": 300,
                "level": 1,
                "xpToNextLevel": 500,
                "badges": [],
                "dailyStreak": 2,
                "gems": 30
            },
            "codeSubmissions": [
                {
                    "riddleId": "python_two_sum",
                    "code": "def solve():\n    nums = [2, 7, 11, 15]\n    target = 9\n    # Your code goes here\n    # Hint: Use a dictionary to store numbers you've seen\n    \n    return [0,1]  # Return the indices",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T09:20:18.791Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                },
                {
                    "riddleId": "js_palindrome",
                    "code": "function isPalindrome(word) {\n    // Convert to lowercase for case-insensitive comparison\n    word = word.toLowerCase();\n\n    // Compare the word with its reverse\n    return word === word.split('').reverse().join('');\n}",
                    "isCorrect": true,
                    "timestamp": "2025-08-19T09:22:38.290Z",
                    "aiAnalysis": "Workflow 1923e305-a659-4a5d-ac7d-a1702094840f triggered successfully"
                }
            ]
        }
    ]
}